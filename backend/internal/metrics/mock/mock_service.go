// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen --destination=./mock/mock_service.go --source=./service.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	metrics "acme.inc/analytics/internal/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddMetric mocks base method.
func (m *MockService) AddMetric(cmd metrics.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetric", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMetric indicates an expected call of AddMetric.
func (mr *MockServiceMockRecorder) AddMetric(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetric", reflect.TypeOf((*MockService)(nil).AddMetric), cmd)
}

// GetDataByMetricName mocks base method.
func (m *MockService) GetDataByMetricName(metricName string, granularity metrics.Granularity, startDate, endDate time.Time) (metrics.AVGMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataByMetricName", metricName, granularity, startDate, endDate)
	ret0, _ := ret[0].(metrics.AVGMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataByMetricName indicates an expected call of GetDataByMetricName.
func (mr *MockServiceMockRecorder) GetDataByMetricName(metricName, granularity, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataByMetricName", reflect.TypeOf((*MockService)(nil).GetDataByMetricName), metricName, granularity, startDate, endDate)
}

// ListMetrics mocks base method.
func (m *MockService) ListMetrics() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetrics")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetrics indicates an expected call of ListMetrics.
func (mr *MockServiceMockRecorder) ListMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetrics", reflect.TypeOf((*MockService)(nil).ListMetrics))
}
